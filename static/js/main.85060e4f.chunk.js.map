{"version":3,"sources":["logo.svg","components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","key","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NAAAA,EAAOC,QAAU,IAA0B,kC,qICK9BC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACCC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCNFI,G,MAAO,SAACC,GACjB,OACI,yBAAKJ,UAAU,kBACX,yBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,4BAAKJ,EAAMG,QAAQE,MACnB,2BAAIL,EAAMG,QAAQG,UCJjBC,G,MAAW,SAACP,GACrB,OACI,yBAAKJ,UAAU,aAEbI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCiD3BQ,G,wBAnDb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAyBRL,aAAe,SAAAiB,GAAC,OAAI,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAxBxD,EAAKC,MAAQ,CACXT,SAAU,GACVM,YAAY,IAJG,E,iFAUE,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAC3BL,SAAUc,S,+BAaP,MAE0BC,KAAKN,MAA9BT,EAFD,EAECA,SAAUM,EAFX,EAEWA,YAEZU,EAAmBhB,EAASiB,QAAO,SAAAtB,GAAO,OAE5CA,EAAQE,KAAKqB,cAAcC,SAASb,EAAYY,kBAGtD,OACE,yBAAK9B,UAAU,OAEX,gDACA,kBAAC,EAAD,CACIF,YAAY,kBACZC,aAAc4B,KAAK5B,eAEvB,kBAAC,EAAD,CAAUa,SAAUgB,S,GA7CVI,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.85060e4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n//incase we don't need internal state nor lifecycle hooks, just use functional components\r\n//destructuring our props to obtain the placeholder and handleChange.\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input  \r\n     className=\"search\"\r\n     type=\"search\" \r\n     placeholder={placeholder}\r\n     onChange={handleChange}\r\n     />\r\n);","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n        {\r\n          props.monsters.map(monster => \r\n          <Card key={monster.id} monster={monster} />) //key helps react to keep track for each of the monster in case of updates\r\n        }\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField:''\n    }\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  //lifeCycle Mothod\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((users) => this.setState({\n        monsters: users\n    }))\n  }\n\n  //defining our own methods\n\n  // handleChange(e) {\n  //   this.setState({ searchField: e.target.value});\n  // }\n\n  //with arrow functions -> there is no need to bind this, because they automaticaly get lexical scoping\n  //means they automatically bind \"this\" to the context/scope in which they are defined\n  handleChange = e => this.setState({ searchField: e.target.value});\n  render() {\n    //Use destructuring to pull our state object properties into constants - Destructuring\n    const { monsters, searchField} = this.state;\n    //function to filter monsters based on searchText\n    const filteredMonsters = monsters.filter(monster => \n      // NOTE -> when no curly baraces, don't use RETURN KEYWORD\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    \n  return (\n    <div className=\"App\">\n        \n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n            placeholder=\"Search monsters\"\n            handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}